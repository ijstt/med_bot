import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import config
import keyboard as kb
from datab import Database
from geocode import get_ll_span

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

# —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)
db = Database("hospital.db")


class AllStates(StatesGroup):
    name = State()

    gl_q1 = State()
    gl_q2 = State()
    gl_q3 = State()
    gl_q4 = State()
    gl_q5 = State()
    gl_answ = State()

    zh_q1 = State()
    zh_q2 = State()
    zh_q3 = State()
    zh_q4 = State()
    zh_q5 = State()
    zh_answ = State()

    zub_q1 = State()
    zub_q2 = State()
    zub_q3 = State()
    zub_q4 = State()
    zub_q5 = State()
    zub_answ = State()

    ru_q1 = State()
    ru_q2 = State()
    ru_q3 = State()
    ru_q4 = State()
    ru_q5 = State()
    ru_answ = State()

    uh_q1 = State()
    uh_q2 = State()
    uh_q3 = State()
    uh_q4 = State()
    uh_q5 = State()
    uh_answ = State()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if not db.user_exists(message.from_user.id):
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        await AllStates.name.set()
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {db.get_name(message.from_user.id)}",
                               reply_markup=kb.menu)


@dp.message_handler(state=AllStates.name)
async def set_name(message: types.Message, state: FSMContext):
    if message.text.isalpha() and not message.text.isdigit():
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!")
        await bot.send_message(chat_id=message.from_user.id,
                               text="–Ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —á–∞—Ç-–±–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å /help –∏ —É–∑–Ω–∞–π, –∫–∞–∫ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è :)",
                               reply_markup=kb.menu)
        await state.finish()
        db.add_user(message.from_user.id, message.text)

    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º")


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=config.HELP_MES)


@dp.message_handler(text=['üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'])
async def lk(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–í–∞—à–µ –∏–º—è - {db.get_name(message.from_user.id)}",
                           reply_markup=kb.lk_menu)


@dp.message_handler(text=['‚¨Ö –ù–∞–∑–∞–¥'])
async def back(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                           reply_markup=kb.menu)


@dp.message_handler(text=['üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É'])
async def doctor(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                           reply_markup=kb.doctor)


@dp.message_handler(text=['‚ù§ –°–∏–º–ø—Ç–æ–º—ã'])
async def docs(message: types.Message, state: FSMContext):
    await message.answer(text="–ß—Ç–æ —É –í–∞—Å –±–æ–ª–∏—Ç?",
                         reply_markup=kb.menu_simp)
    await state.finish()


# –ì–û–õ–û–í–ê
@dp.message_handler(text=['üß† –ì–æ–ª–æ–≤–∞'])
async def g1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.gl_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞?<b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q1)
async def g1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã —É–ø–∞–ª–∏? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q2)
async def g2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–µ—Ä–∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q3)
async def g3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q4)
async def g4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å —Å–∏–ª—å–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q5)
async def g5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–î–∞" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –º–∏–≥—Ä–µ–Ω—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∏–∂–µ",
                                 reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ –∑–Ω–∞—é" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã —Å–∏–ª—å–Ω–æ —É–ø–∞–ª–∏, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≥–æ–ª–æ–≤—ã",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –ñ–ò–í–û–¢
@dp.message_handler(text=['‚ù§ –ñ–∏–≤–æ—Ç'])
async def zh1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.zh_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q1)
async def zh1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã —É—à–∏–±–ª–∏—Å—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q2)
async def zh2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å –µ—Å—Ç—å —Ç–µ–º–ø—Ä–µ–∞—Ç—É—Ä–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q3)
async def zh3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q4)
async def zh4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å —Å–∏–ª—å–Ω–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q5)
async def zh5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –Ω–µ—Å–≤–∞—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∏–∂–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–°–∫–æ—Ä–µ–µ –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ –∑–Ω–∞—é" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∂–∏–≤–æ—Ç–∞",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –ó–£–ë
@dp.message_handler(text=['ü¶∑ –ó—É–±—ã'])
async def z_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.zub_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª—è—Ç –∑—É–±—ã? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q1)
async def z1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–≥–ª–∏ –ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–∫–æ–ª –∫—É—Å–æ—á–∫–∞ –∑—É–±–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q2)
async def z2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–ß–∏—Å—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑—É–±—ã 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q3)
async def z3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –≤—ã–ø–∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q4)
async def z4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–ï–ª–∏ –ª–∏ –≤—ã –∫–∏—Å–ª–æ–µ/—Ñ—Ä—É–∫—Ç—ã –Ω–µ–¥–∞–≤–Ω–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q5)
async def z5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(text="–í–æ–∑–º–æ–∂–Ω–æ –∑—É–± –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–π –ø–∏—â–∏, –ø—Ä–æ–ø–æ–ª–æ—â–∏—Ç–µ —Ä–æ—Ç, –µ—Å–ª–∏ –±–æ–ª—å –Ω–µ —É—Ç–∏—Ö–Ω–µ—Ç"
                                      " —Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É", reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –∑—É–± –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–π –ø–∏—â–∏, –ø—Ä–æ–ø–æ–ª–æ—â–∏—Ç–µ —Ä–æ—Ç –∏ –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å —Å–ª–∞–±–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ,"
                     " –µ—Å–ª–∏ –±–æ–ª—å –Ω–µ —É—Ç–∏—Ö–Ω–µ—Ç —Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É", reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ —ç–º–∞–ª—å –∑—É–±–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã —Å–∫–æ–ª–æ–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ—á–µ–∫ –∑—É–±–∞, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –†–£–ö–ê –ò–õ–ò –ù–û–ì–ê
@dp.message_handler(text=['üí™ –†—É–∫–∞ –∏–ª–∏ –Ω–æ–≥–∞'])
async def r1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.ru_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q1)
async def r1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –≤—ã —É—à–∏–±–ª–∏—Å—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q2)
async def r2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å –µ—Å—Ç—å —Å–∏–Ω—è–∫ –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q3)
async def r3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í–∞—Å –º–æ–≥ –∫—Ç–æ-—Ç–æ —É–∫—É—Å–∏—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q4)
async def r4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–°–∏–ª—å–Ω–æ –ª–∏ –±–æ–ª–∏—Ç –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q5)
async def r5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –≤–∞—Å —É–∫—É—Å–∏–ª–æ –∫–∞–∫–æ–µ-–ª–∏–±–æ –Ω–∞—Å–µ–∫–æ–º–æ–µ –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ, —Å–æ–≤–µ—Ç—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–Ω–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—á–∏–Ω—è—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ —Ç—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–π–¥–µ—Ç")

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å"
                                      " –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –£–•–û
@dp.message_handler(text=['üëÇ –£—Ö–æ'])
async def u1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.uh_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç —É—Ö–æ? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q1)
async def u1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–û–Ω–æ –∑–≤–µ–Ω–∏—Ç? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q2)
async def u2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —Å—Ç–∞–ª–∏ —Ö—É–∂–µ —Å–ª—ã—à–∞—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q3)
async def u3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã –±–æ–ª–µ–µ—Ç–µ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q4)
async def u4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–°–∏–ª—å–Ω–æ –ª–∏ –±–æ–ª–∏—Ç —É—Ö–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q5)
async def u5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ —É—Ö–æ –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –±–æ–ª–µ–∑–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ø–ª–∏ –¥–ª—è —É—à–µ–π –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ—Ä—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —Å–∫–æ—Ä–æ –ø—Ä–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–û–±—Ä–∞—Ç–∏—Å—å –∫ –ª–æ—Ä—É, –≤–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—á–∏—Å—Ç–∏—Ç—å —É—à–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –∑–∞–±–∏–ª–∏—Å—å")

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(
                text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,–µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏"
                     " –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


@dp.message_handler(text=['üè• –í—ã–±—Ä–∞—Ç—å –±–æ–ª—å–Ω–∏—Ü—É'])
async def hospital(message: types.Message):
    keyb = kb.make_keyboard("region", db.get_regions())
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω",
                           reply_markup=keyb)


@dp.callback_query_handler(lambda message: message.data[:6] == "region")
async def region(callback_query: types.CallbackQuery):
    region_name = callback_query.data[:6]
    keyb = kb.make_keyboard("city", db.get_cities(region_name))
    await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
                           reply_markup=keyb)


@dp.callback_query_handler(lambda message: message.data[:4] == "city")
async def region(callback_query: types.CallbackQuery):
    city_name = callback_query.data[:4]
    keyb = kb.make_keyboard("hospital", db.get_hospitals(city_name))
    await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å–Ω–∏—Ü—É",
                           reply_markup=keyb)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
